*** linux-4.11.12/arch/arm/mm/init.c.orig	2017-09-06 10:04:47.490360395 -0700
--- linux-4.11.12/arch/arm/mm/init.c	2017-09-06 10:23:42.898278897 -0700
***************
*** 713,742 ****
  {
  	struct task_struct *t, *s;
  
  	read_lock(&tasklist_lock);
  	for_each_process(t) {
  		if (t->flags & PF_KTHREAD)
  			continue;
  		for_each_thread(t, s)
  			set_section_perms(perms, n, true, s->mm);
  	}
  	read_unlock(&tasklist_lock);
  	set_section_perms(perms, n, true, current->active_mm);
  	set_section_perms(perms, n, true, &init_mm);
  }
  
! int __fix_kernmem_perms(void *unused)
  {
  	update_sections_early(nx_perms, ARRAY_SIZE(nx_perms));
  	return 0;
  }
  
! void fix_kernmem_perms(void)
  {
  	stop_machine(__fix_kernmem_perms, NULL, NULL);
  }
  
! int __mark_rodata_ro(void *unused)
  {
  	update_sections_early(ro_perms, ARRAY_SIZE(ro_perms));
  	return 0;
--- 713,746 ----
  {
  	struct task_struct *t, *s;
  
+ /* TS (https://patchwork.kernel.org/patch/9686289/)
  	read_lock(&tasklist_lock);
+ */
  	for_each_process(t) {
  		if (t->flags & PF_KTHREAD)
  			continue;
  		for_each_thread(t, s)
  			set_section_perms(perms, n, true, s->mm);
  	}
+ /* TS (https://patchwork.kernel.org/patch/9686289/)
  	read_unlock(&tasklist_lock);
+ */
  	set_section_perms(perms, n, true, current->active_mm);
  	set_section_perms(perms, n, true, &init_mm);
  }
  
! static int __fix_kernmem_perms(void *unused)
  {
  	update_sections_early(nx_perms, ARRAY_SIZE(nx_perms));
  	return 0;
  }
  
! static void fix_kernmem_perms(void)
  {
  	stop_machine(__fix_kernmem_perms, NULL, NULL);
  }
  
! static int __mark_rodata_ro(void *unused)
  {
  	update_sections_early(ro_perms, ARRAY_SIZE(ro_perms));
  	return 0;
